#   hwhwang2/_____README (This file)
#			|
#			|_____hw3_hwhwang2.pdf
#			|
#			|_____run.bash 
#			|
#			|_____gendata.bash
#			|
#			|_____exp.xls
#			|
#			|_____python/
#			|
#			|_____ java/ _____Data.java
#						|
#						|_____Dataset.java
#						|
#						|_____Machine.java
#						|
#						|_____Perceptron.java
#						|
#						|_____Winnow.java
#						|
#						|_____AdaGrad.java			
#						|
#						|_____Exp1b.java
#						|
#						|_____Exp1c.java
#						|
#						|_____Exp2a.java
#						|
#						|_____Exp2b.java
#						|
#						|_____Exp3b.java	
#						|
#						|_____Exp3c.java
#						|
#						|_____Bonus.java
###### Intro ######
First, run the gendata.bash to generate all datasets. It takes hours.
Second, run the run.bash to compile and run all java codes. It takes about 20 mins.
Also, an excel file, exp.xls, is left as record of my experiment result and figures.
After running all bash files, there are 3 folders, data, bin,and result, created.
All result files could be found in /result.

###### Files intro ######
gendata.bash
Create data folder and generate datasets needed

run.bash
Create folders, bin, result, compile all files, and run all experiments automatically.

Data.java
	Function:	
		Save attributes and label. Used in Sgd.
	To execute:
		1. Data(double[] att, double la): input attributes array and label
		2. Data(String line): input String line from data and transfer to attribute vector

Dataset.java
	Function:	
		Save Datas.
	To execute:
		1. Dataset(String datapath): input path of file generated by python code. It will generate dataset automatically.
		2. Dataset(): generate an empty dataset

Machine.java
	Function:	
		Abstract class for all learning classes
		Contains 
		1. Evaluation function 
			errorCorrectTimes(Dataset test)
			Dataset test: input test dataset for train classifier to test.
			return correct, error times of classification and accuracy in string type.
		2. dot(double[] a, double[] b) will find dot product of a and b.

Perceptron.java
	Function:	
	 	Core of Perceptron learning algorithm.
	To execute:
		1. Constructor 
			Perceptron(Dataset train, double learnRate, double gamma,int timesLimit)
			Dataset train: input training dataset
			double learnRate: learning rate could be defined
			double gamma: margin of learning, put 0 for perceptron without margin
			int timesLimit: limitation to the round times through the train dataset
Winnow.java
	Function:	
		Core of Winnow learning algorithm.
	To execute:
		1. Constructor 
		Winnow(Dataset train, double alpha, double gamma,int timesLimit)
		Dataset train: input training dataset
		double alpha: learning base number alpha could be defined
		double gamma: margin of learning, put 0 for Winnow without margin
		int timesLimit: limitation to the round times through the train dataset
AdaGrad.java
	Function:	
		Core of AdaGrad learning algorithm.
	To execute:
		1. Constructor 
		AdaGrad(Dataset train, double learnRate, int timesLimit)
		Dataset train: input training dataset
		double learnRate: learning rate could be defined
		int timesLimit: limitation to the round times through the train dataset
dExp1b.java
	Function:
		Tuning parameters for Experiment1
dExp1c.java
	Function:
		Experiment1
dExp2a.java
	Function:
		Tuning parameters for Experiment2
dExp2b.java
	Function:
		Experiment2
dExp3b.java	
	Function:
		Tuning parameters for Experiment3
dExp3c.java
	Function:
		Experiment3
dBonus.java
	Function:
		Bonus Experiment